# 2-1. Functions, Import, Random, math.

Code gets reused over and over, so we use functions and packages to manage our saved code. A function will serve a single function, like outputing the smallest number in a list, or formatting a paragraph, or printing out the first 10 primes.

Packages are collections of functions that have been written by others that we can access. These include the tools for mathematical operations (using the `math` package), tools for using stats (`numpy`) or accessing random numbers (`random`).

## Outline

1. Structure/purpose of functions (`def`, docstring, body, `return`)
2. Arguments, parameters (scope)
3. Functions without outputs
4. Built-in functions (`min()`, `max()`, `abs()`, `len()`)
5. Iterators
6. Import (`from`/`import`, `random`, `math`)
7. Math module (`sqrt`, `factorial`, `e`, `log`)
8. Random module (`.randint(a, b)`, `.random()`, `.uniform(a,b)`, `.seed()`)
9. Other modules. (`dir()`, `datetime`, `time`, `itertools`)

**Project**: Compute e randomly by trials.

## 1. Structure/purpose of functions (`def`, docstring, body, `return`)

A function is a block of code that takes in some data (called **arguments**) and outputs (or `return`s) something. Here is a simple function that returns the average of two numbers.

```python
def average(a, b):
    """Return the average of two numbers a, b as a float."""
    return (a+b)/2
```

The first line starts with `def` which tells Python that we are defining a function. The name of the function is up to you, but make it decsriptive and readable. The input arguments `(a,b)` are contained in the paranthesis; you can have 0 arguments, or as many as you like. The **body** of the function is indented, and is where the code goes. 

The first line of the body is always a commented string called the **docstring**; it always answers the question ``Hey function, what will you do?". Use grammar like `"""Give the average..."""` as opposed to `"""This gives the average"""`. Docstrings can be multiple lines.

The function can have many lines in its body, but it should have at least one `return` which tells it what to output. A function will stop running as soon as it hits a `return`.

Functions are very flexible! They can output many different things.

To use a function (or *call* it). You write the name of the function with your favourite inputs.

```python
def average(a, b):
    """Return the average of two numbers a, b as a float."""
    return (a+b)/2
print( average(1,3) )
>>>> 2
print( average(-1,3) )
>>>> 1
```

### Exercise

Write a function called `four_sum` that takes in four arguments and outputs the sum of all four numbers.

```python

# Your code here
#
#

if four_sum(-1, 0, 1, 9) == 9 and four_sum(0,0,0,0) == 0:
    print("Great work!")
else:
    print("Something went wrong!")
```
